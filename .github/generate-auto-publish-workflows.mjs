/**********************************************************************
 * Companion script to create individual auto publication workflows for
 * specifications contained in the repository. Run the script any time
 * the auto-publish-template.yml is updated or when the list of specs
 * changes below.
 **********************************************************************/

/**
 * List of properties that can appear to describe a spec.
 */
const properties = [
  // Spec shortname (without level), e.g., 'encrypted-media'
  'shortname',

  // Spec status on /TR, e.g., 'WD'
  'publicationStatus',

  // Relative path to source file
  'source',

  // Relative path to destination file in gh-pages branch (Optional)
  // If not provided, the destination file is computed from the source by
  // removing `-respec`.
  'destination',

  // Name of the repository secret that contains the publication token for
  // Echidna (Optional).
  // If not provided, the name is computed from the shortname, e.g.,
  // `ECHIDNA_TOKEN_ENCRYPTED_MEDIA` for `encrypted-media-2` (note the level
  // is stripped)
  'tokenName',

  // Additional paths that should trigger the auto-publish script if changed
  // on top of the actual source. Glob patterns may be used.
  'additionalPaths'
];


/**
 * List of specs for which an auto-publish script needs to be created.
 */
const specs = [
  {
    shortname: 'encrypted-media',
    source: 'encrypted-media-respec.html',
    destination: 'index.html',
    publicationStatus: 'WD',
    additionalPaths: [
      '*.css',
      '*.svg'
    ]
  },
  {
    shortname: 'eme-hdcp-version-registry',
    source: 'hdcp-version-registry-respec.html',
    publicationStatus: 'DRY'
  },
  {
    shortname: 'eme-initdata-registry',
    source: 'format-registry/initdata/index-respec.html',
    publicationStatus: 'DRY'
  },
  {
    shortname: 'eme-initdata-cenc',
    source: 'format-registry/initdata/cenc-respec.html',
    publicationStatus: 'NOTE'
  },
  {
    shortname: 'eme-initdata-keyids',
    source: 'format-registry/initdata/keyids-respec.html',
    publicationStatus: 'NOTE'
  },
  {
    shortname: 'eme-initdata-webm',
    source: 'format-registry/initdata/webm-respec.html',
    publicationStatus: 'NOTE'
  },

  {
    shortname: 'eme-stream-registry',
    source: 'format-registry/stream/index-respec.html',
    publicationStatus: 'DRY'
  },
  {
    shortname: 'eme-stream-mp4',
    source: 'format-registry/stream/mp4-respec.html',
    publicationStatus: 'NOTE'
  },
  {
    shortname: 'eme-stream-webm',
    source: 'format-registry/stream/webm-respec.html',
    publicationStatus: 'NOTE'
  }
];


/**
 * Main loop, create a workflow per spec
 */
import assert from 'node:assert';
import { readFile, writeFile } from 'node:fs/promises';
import { dirname, join } from 'node:path';
import { fileURLToPath } from 'node:url';

const scriptPath = dirname(fileURLToPath(import.meta.url));
let template = await readFile(join(scriptPath, 'auto-publish-template.yml'), 'utf8');
template = template.replace(/#{5,}.*#{5,}/s,
`######################################################################
# IMPORTANT: Do not edit this file directly!
#
# This workflow was automatically generated through the
# generate-auto-publish-workflows.mjs script. To update the workflow,
# make changes to the template file and run the script again.
######################################################################`);

for (const spec of specs) {
  if (!spec.destination) {
    spec.destination = spec.source.replace(/-respec/, '');
  }
  if (!spec.tokenName) {
    spec.tokenName = 'ECHIDNA_TOKEN_' +
      spec.shortname.toUpperCase().replace(/-/g, '_');
  }
  if (spec.additionalPaths) {
    spec.additionalPaths = spec.additionalPaths.map(path => `- '${path}'`).join('\n    ');
  }

  let content = template;
  for (const prop of properties) {
    content = content.replace(new RegExp('{{' + prop + '}}', 'g'), spec[prop] ?? '');
  }

  const filename = join(scriptPath, 'workflows', `auto-publish-${spec.shortname}.yml`);
  await writeFile(filename, content, 'utf8');
}
